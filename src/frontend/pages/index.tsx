import type { NextPage } from 'next'
import Head from 'next/head'
import { useState } from 'react'
import CodeEditor from '../components/CodeEditor'
import CodeServerAPI from '../lib/server/code_runner'

type outputError = {
  name?: string,
  output?: string,
  hasErrors?: boolean,
  stack?: any
}

type output = {
  logs?: string,
  output: string,
  hasErrors: boolean
}

type cellObject = {
  [cellId: string]: { content: string, language: string }
}

const Home: NextPage = () => {
  const [cellObject, setCellObject] = useState<cellObject>({})
  const [currCellLanguage, setCurrCellLanguage] = useState('javascript')
  const [output, setOutput] = useState<output>({ output: '', hasErrors: false })
  const [outputError, setOutputError] = useState<outputError>({})
  const [hasError, setHasError] = useState(false)

  const handleCellChange = (cellId: string, value: string, language: string) => {
    const newCellObj = { ...cellObject, [cellId]: { content: value, language } }
    setCellObject(newCellObj)
    setCurrCellLanguage(language)
  }

  const handleCellRunCallback = (accumulatedResult: string) => {
    setOutput({ output: accumulatedResult, hasErrors: false })
  }

  const handleCellRun = (cellId: string) => {
    const content = cellObject[cellId].content
    CodeServerAPI.exec(content, currCellLanguage, handleCellRunCallback)
      .catch((error) => {
        setOutputError({
          ...error,
        })
        console.log(error)
      })
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CodeEditor
        cellId={"1"}
        onCellChange={handleCellChange}
        onCellRun={handleCellRun}
      />
      <CodeEditor
        cellId={"2"}
        onCellChange={handleCellChange}
        onCellRun={handleCellRun}
      />
      <br />
      <br />
      {hasError ? (
        <div className="text-red-400 p-3">
          <h3><b>{outputError.name}</b></h3>
          {outputError.output}
        </div>
      ) : (
        <textarea
          className="m-2 w-96 h-96"
          value={output.output}
        />
      )}
    </div>
  )
}

export default Home
